В этом автотесте я закрепляла навыки работы с Selenium
и написала простой end-to-end сценарий для сайта Swag Labs.

Что делает мой автотест:

-Открывает сайт в режиме инкогнито — это нужно, чтобы избежать всплывающих окон про сохранённые пароли и кэш.
-Выполняет авторизацию — я ввожу логин и пароль в соответствующие поля и нажимаю кнопку входа.
-Проверяю, что вход прошёл успешно — проверяю URL и заголовок страницы.
-Добавляю товар в корзину — нахожу кнопку добавления рюкзака и кликаю по ней.
-Перехожу в корзину и снова проверяю URL.
-Начинаю оформление заказа — перехожу по кнопке Checkout, ввожу имя, фамилию и индекс.
-Подтверждаю данные, нажимаю Continue и проверяю, что попала на второй шаг.
-Завершаю покупку, нажимая кнопку Finish, и в конце проверяю, что открылась страница завершения заказа.
-Весь сценарий включает:
-Работу с локаторами (XPath),
-методы send_keys() для ввода текста,
-click() для нажатий,
-assert для проверок результатов.

Добавила time.sleep() между шагами, чтобы визуально было видно, как выполняется каждый этап.

Этот автотест помогает понять, как работает Selenium и как писать простые end-to-end сценарии.




Обзор файлов

Проект состоит из:
1) файла pytest.ini (ссожержит описание маркеров для тестов: smoke, auth, profile, regression +  опции запуска).

2) файл conftest.py ( содержит фикстуру для драйвера браузера. так же формируется файл environment.properties,
в который передаются переменные окружения — например, STAGE и BROWSER).

3) файл с тестами добавлены аннотации Allure: @epic, @feature, @story, @severity. Также внутри тестов будут allure.step
для шагов и allure.attach для скриншотов.

⸻

1)Запуск тестов происходит путем запуска комманды
        STAGE="test" BROWSER="chrome" pytest --alluredir=allure-results
(эта команда запускает все тесты и складывает результаты в папку allure-results).

2) Генерация отчёта на сервер  командой:

       allure serve allure-results
(открывается браузер со сгенерированным Allure-отчётом)




































